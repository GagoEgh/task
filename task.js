// Задача 1. 
// Первое взвешивание: Разделим восемь монет на три группы: две группы по три монеты и одну группу из двух монет. 
// Назовём их A (3 монеты), B (3 монеты) и C (2 монеты). Взвешиваем группу A против группы B.

// Если A тяжелее B, значит, тяжелая монета в группе A.
// Если B тяжелее A, значит, тяжелая монета в группе B.
// Если A и B в равновесии, значит, тяжелая монета в группе C.
// Второе взвешивание: После того как определили, в какой группе находится тяжелая монета, действуем следующим образом:

// Если тяжелая монета в группе A или B (по три монеты): возьмём две монеты из этой группы и взвесим их друг против друга.
// Если одна из них тяжелее, то это и есть тяжелая монета. Если они в равновесии, то третья монета из группы — тяжелая.
// Если тяжелая монета в группе C (2 монеты): просто взвесим эти две монеты друг против друга. Тяжелая будет той, которая тяжелее.
// Таким образом, за два взвешивания мы определим тяжелую монету.

// Задача 2.
// В конечном итоге, после множества проб и перестановок, можно установить, что задача может оказаться нерешаемой,
// но в большинстве случаев, исходя из правил произведения, есть вероятность, что решение возможно. 
//Однако, для точного ответа и обнаружения правильной комбинации, потребуются более сложные вычисления или переборы, 
//что выходит за рамки простого объяснения.

// Задача 3.
// Используем первый предмет для уменьшения диапазона:
// Начнем с некоторой высоты, которая делит диапазон на две части. Если предмет разбивается, мы переходим к меньшей высоте. 
// Если не разбивается, мы переходим к большей высоте. Чтобы минимизировать количество экспериментов, выбираем высоты, 
// которые равномерно распределяют оставшиеся высоты, используем второй предмет для проверки. Начнем с высоты 1000 метров.
// Если предмет не разбивается, поднимаемся на 1000 метров (2000, 3000, 4000, 5000).
// Если предмет разбивается на высоте 3000 метров, начинаем проверять высоты от 2000 до 3000, начиная с 2000.
// Таким образом, мы сможем использовать два предмета для сокращения диапазона, и максимальное количество экспериментов не превысит 100.

// Задача 4.
// Обозначим количество пирожков в столовой за x.
// Первый студент хочет купить: (1/3)x+2
// Второй студент хочет купить: (1/4)x+3
// Третий студент хочет купить: 1/5x+8
// Если все студенты купят желаемое количество пирожков, то все пирожки в столовой закончатся:
// 1/3x+2+1/4x+3+1/5x+8 = x;
// 1/3x + 1/4x + 1/5x + 13 = x;
// 20/60x +15/60x + 12/60x +13 = x
// 47/60x + 13 = x;
// 13 = x- 47/60x;
// 13 = 13/60x;
// x= 60;
// в столовой изначально было 60 пирожков.
// Первый студент: 1/3 x 60 + 2=22
//Второй студент: 1/4 X 60 +3 = 18
// Третий студент:1/5 X 60 +8 = 20
// Сумма: 22 + 18 + 20 = 60


// Задачи по программированию
// Задача 1. 
function getComputersString(count) {
    let word;
    const lastDigit = count % 10;
    const lastTwoDigits = count % 100;

    if (lastDigit === 1 && lastTwoDigits !== 11) {
        word = "компьютер";
    } else if ((lastDigit >= 2 && lastDigit <= 4) && (lastTwoDigits < 12 || lastTwoDigits > 14)) {
        word = "компьютера"; 
    } else {
        word = "компьютеров";
    }

    return `${count} ${word}`;
}

console.log(getComputersString(34));

// Задача 2. 
function  findCommonDivisors(numbers){
    
    const divisors = getDivisors(numbers);
    let saemNumbers = divisors[0];
    for(let i = 1;i<divisors.length-1;i++){
        semNumbers = semNumbers.filter((item)=> divisors[i].includes(item));
    }
    return saemNumbers
}

function getDivisors(numbers){
    const min = Math.min(...numbers);
    const divisors = [];
 
    for(let k = 0; k<numbers.length;k++){
        const arr = [];
        for(let i = 2;i<min;i++){
            if(numbers[k]% i===0){
                arr.push(i)
            }
        }
        divisors.push(arr)
    }

    return divisors
}

findCommonDivisors([42, 12, 18]);

// Задача 3.
function getPrimeNumber(start,end){
    const primes = [];
    if(start%2===0){
        start+=1;
    }

    for(let i = start; i<= end; i+=2){
        let isPrime = true;
        for(let k = 2; k < 10; k++){
            if(i%k===0){
                isPrime = false;
                break;
            }
        }

        if(isPrime){
            primes.push(i)
        }

    }
    return primes
}

getPrimeNumber(10, 30);

// Задача 4.
function printMultiplicationTable(num){

    let header = '   ';
    for (let i = 1; i <= num; i++) {
        header += ` ${i.toString().padStart(2, ' ')}`;
    }
    console.log(header);
    
    for (let i = 1; i <= num; i++) {
        let row = `${i.toString().padStart(2, ' ')} `;
      
        for (let j = 1; j <= num; j++) {
            row += ` ${ (i * j).toString().padStart(2, ' ')}`;
        }
        console.log(row);
    }
}

printMultiplicationTable(8)